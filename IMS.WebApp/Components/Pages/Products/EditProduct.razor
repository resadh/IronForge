@page "/editproduct/{id:int}"

@attribute [Authorize(Policy = "Inventory")]

@rendermode InteractiveServer

@inject NavigationManager NavigationManager
@inject IViewProductByIdUseCase ViewProductByIdUseCase
@inject IEditProductUseCase EditProductUseCase

<h3>Izmeni proizvod</h3>
<br/>
@if (this.product is not null)
{
    <EditForm Model="product" OnValidSubmit="Update">
        <DataAnnotationsValidator></DataAnnotationsValidator>
        <ValidationSummary></ValidationSummary>

        <div class="form-group">
            <label for="name">Naziv proizvoda</label>
            <InputText id="name"
                       @bind-Value="product.ProductName"
                       class="form-control">
            </InputText>
            <ValidationMessage For="() => product.ProductName"></ValidationMessage>
        </div>

        <div class="form-group">
            <label for="quantity">Kolicina</label>
            <InputNumber id="quantity"
                         @bind-Value="product.Quantity"
                         class="form-control">
            </InputNumber>
            <ValidationMessage For="() => product.Quantity"></ValidationMessage>
        </div>

        <div class="form-group">
            <label for="price">Cena</label>
            <InputNumber id="price"
                         @bind-Value="product.Price"
                         class="form-control">
            </InputNumber>
            <ValidationMessage For="() => product.Price"></ValidationMessage>
        </div>
        <div class="form-group">
            <label for="price">Inventari</label>
            <ProductInventoriesComponent Product="this.product"></ProductInventoriesComponent>
        </div>
        <br />
        <button type="submit" class="btn btn-primary">Upisi</button>
        &nbsp;
        <a href="/products" class="btn btn-primary">Ponisti</a>
    </EditForm>
}


@code {
    private Product? product;

    [Parameter]
    public int Id { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        this.product = await ViewProductByIdUseCase.ExecuteAsync(this.Id);
    }

    private async Task Update()
    {
        if (product is not null)
        {
            await EditProductUseCase.ExecuteAsync(this.product);
            NavigationManager.NavigateTo("/products");
        }
    }

}
