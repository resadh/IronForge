@using MudBlazor.ThemeManager
@using MudBlazor
@inherits LayoutComponentBase
@inject NavigationManager NavigationManager


<MudThemeProvider />

<MudLayout>
    <MudAppBar Elevation="1">
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())" />
        <MudSpacer />
        <MudIconButton Icon="@Icons.Material.Filled.MoreVert" Color="Color.Inherit" Edge="Edge.End" />
    </MudAppBar>
    <MudDrawer @bind-Open="_drawerOpen" Elevation="2">
        <MudDrawerHeader>
            <MudText Typo="Typo.h5" Class="mt-1">Application</MudText>
        </MudDrawerHeader>
        <MudNavMenu>
            <MudPaper Class="pa-4 mr-16">

                <MudNavLink Href="/" Match="NavLinkMatch.All">
                    <MudIcon Icon="@Icons.Material.Filled.Home" />
                    Home
                </MudNavLink>
                <MudNavLink Href="/produce">
                    <MudIcon Icon="@Icons.Material.Filled.Info" />
                    Proizvodnja
                </MudNavLink>
                <MudNavLink Href="/purchase">
                    <MudIcon Icon="@Icons.Material.Filled.Info" />
                    Kupi
                </MudNavLink>
                <MudNavLink Href="/sell">
                    <MudIcon Icon="@Icons.Material.Filled.Info" />
                    Prodaj
                </MudNavLink>
                <MudNavLink Href="/addinventory">
                    <MudIcon Icon="@Icons.Material.Filled.Info" />
                    Dodaj inventar
                </MudNavLink>
                <MudNavLink Href="/inventories">
                    <MudIcon Icon="@Icons.Material.Filled.Info" />
                    Pregledaj inventar
                </MudNavLink>
                <MudNavLink Href="/products">
                    <MudIcon Icon="@Icons.Material.Filled.Info" />
                    Pregledaj proizvode
                </MudNavLink>
                <MudNavLink Href="/Account/Register">
                    <MudIcon Icon="@Icons.Material.Filled.Info" />
                    Registruj se
                </MudNavLink>

                <MudNavLink Href="/Account/Login">
                    <MudIcon Icon="@Icons.Material.Filled.Info" />
                    Log in
                </MudNavLink>

               @*  <MudNavLink Href="/Account/Logout">
                    <AntiforgeryToken />
                    <MudIcon Icon="@Icons.Material.Filled.Info" />
                    Log out
                    <input type="hidden" name="ReturnUrl" value="@currentUrl" />
                    <button type="submit" class="btn btn-link nav-link">
                        <span class="bi bi-arrow-bar-left-nav-menu" aria-hidden="true"></span> Logout
                    </button>
                </MudNavLink> *@
                <form action="Account/Logout" method="post">
                            <AntiforgeryToken />
                            <input type="hidden" name="ReturnUrl" value="@currentUrl" />
                            <button type="submit" class="btn btn-link nav-link">
                                <span class="bi bi-arrow-bar-left-nav-menu" aria-hidden="true"></span> Logout
                            </button>
                </form>
                            
                          

            </MudPaper>
        </MudNavMenu>
    </MudDrawer>
    <MudMainContent>
        @Body
    </MudMainContent>
</MudLayout>
@code {
    bool _drawerOpen = true;

    void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }
    private string? currentUrl;
    private bool collapseNavMenu = true;
    private string collapseOrNot = "collapse";

    private bool collapseActivitiesMenu = true;
    private bool collapseReportsMenu = true;

    protected override void OnInitialized()
    {
        currentUrl = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
        NavigationManager.LocationChanged += OnLocationChanged;
    }

    private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        currentUrl = NavigationManager.ToBaseRelativePath(e.Location);
        StateHasChanged();
    }

    private void ToggleMenu()
    {
        collapseNavMenu = !collapseNavMenu;
        collapseOrNot = collapseNavMenu ? "collapse" : string.Empty;
    }

    private void ToggleActivities()
    {
        collapseActivitiesMenu = !collapseActivitiesMenu;
        collapseReportsMenu = true;
    }

    private void ToggleReports()
    {
        collapseReportsMenu = !collapseReportsMenu;
        collapseActivitiesMenu = true;
    }

    private void CollapseDropdownMenus()
    {
        collapseActivitiesMenu = true;
        collapseReportsMenu = true;
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= OnLocationChanged;
    }
}